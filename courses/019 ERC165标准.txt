
概念：
--ERC165 是以太坊的一个重要标准，通过它，合约能够声明和识别接口，提高了以太坊生态系统中合约的互操作性和兼容性。
--任何实现了 supportsInterface(bytes4 interfaceId) 函数的合约都可以被视为遵循 ERC165 标准。

主要特点：
--接口识别：合约通过实现 supportsInterface 函数，返回一个布尔值，指示其是否支持特定的接口。
--接口标识符：每个接口都有一个唯一的标识符（通常是一个 bytes4 类型的值），由接口的函数签名生成。通过这些标识符，外部合约可以确认目标合约是否支持特定功能。
--灵活性：ERC165 使合约能够向外部系统声明其功能，从而促进合约间的交互与兼容性。

应用场景：
--代币标准（如 ERC721 和 ERC1155）：在 NFT 和其他代币合约中，ERC165 用于验证支持的接口，使得合约能够更好地与外部应用程序（如钱包、市场等）互动。
--合约互操作性：通过使用 ERC165，开发者可以创建更具互操作性的合约，允许它们识别和调用其他合约的功能。

总结：
--ERC165 标准是在 2017 年提出的。它的目的是为智能合约提供一种标准化的方式，以声明它们支持哪些接口。
--ERC165 标准由 Louis Garnier 提出，旨在增强合约的互操作性，确保不同合约和应用程序之间可以可靠地检测接口支持。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

以下是实例：

interface IERC165 {
    // "支持接口声明函数"
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

contract ExampleContract is IERC165 {
    // ERC165标识符
    bytes4 private constant INTERFACE_ID_EXAMPLE = 0x12345678;

    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {
        return interfaceId == INTERFACE_ID_EXAMPLE;
    }
}

==============================================================================

interface IERC20 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

contract ERC20Token is IERC20 {
    // 省略实现细节
    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {
        return interfaceId == type(IERC20).interfaceId;
    }
}

function buyToken(address tokenContract, address buyer, uint256 amount) external {
    /*
        用户A调用该函数：
        如果代币合约遵循了IERC20标准，则用户A转账给用户buyer一些代币。
    */

    // 检查是否支持 ERC20 接口
    require(IERC20(tokenContract).supportsInterface(type(IERC20).interfaceId), "Not an ERC20 token");

    // 调用 ERC20 的 transfer 函数
    IERC20(tokenContract).transfer(buyer, amount);
}
