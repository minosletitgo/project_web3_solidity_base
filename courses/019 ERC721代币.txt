
概念：
--一个数字资产的容器，允许用户之间进行转移和管理。
--ERC721是以太坊上的非同质化代币标准，允许每个代币都有独特的属性，使其不可互换。
--ERC721必须遵循ERC165标准。

特点：
--独特性：每个代币都有唯一的标识符，使其在所有代币中具有唯一性。
--所有权：用户可以通过区块链验证自己对代币的所有权，确保资产的安全性。
--转移：用户可以方便地在区块链上进行代币的买卖和转移。

应用场景：
--它广泛应用于数字艺术、游戏物品、收藏品等领域。

总结：
--ERC721 标准是在 2017 年 1 月提出的。它由 William Entriken、Dan Reecer 和 Nastassia Sachs 提出，旨在定义一种用于创建和管理非同质化代币（NFT）的标准。
--ERC721 允许每个代币拥有独特的特性和身份，广泛应用于数字艺术、游戏资产等领域。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

关于tokenId的生成：
--顺序递增：使用全局计数器，在每次铸造新代币时递增。
--哈希生成：利用某些唯一的信息（如用户地址、时间戳或其他标识符）生成哈希值，然后使用哈希值的一部分作为 tokenId。
--随机生成：在某些情况下，特别是游戏和艺术NFT中，可能需要随机生成 tokenId。通常会使用链上数据（如区块哈希）来生成伪随机数。
--外部系统（预言机）：在某些项目中，可能使用外部预言机服务生成 tokenId，以确保更高的随机性和唯一性。
--批量铸造：在批量铸造的场景中，可能会预先生成一系列 tokenId，并在铸造时从中分配。

知名 ERC721 代币项目：
--CryptoKitties：它允许用户铸造、买卖和繁殖虚拟猫，每只猫都是独一无二的非同质化代币（NFT），实现了每只猫的唯一性和所有权管理。
--CryptoPunks：是一系列独特的数字头像，拥有10,000个不同的像素艺术角色。它们是最早的 NFT 项目之一，被广泛视为数字艺术的先锋。
--Bored Ape Yacht Club (BAYC)：是一个集合了10,000个独特的猴子头像的项目，每个头像都有不同的特征和属性。持有者不仅拥有头像的所有权，还可以享受会员特权和社区活动。
--Art Blocks：是一个平台，允许艺术家创建生成艺术作品的代码，并将其作为 NFT 铸造。
--Axie Infinity：是一款基于区块链的游戏，玩家可以收集、繁殖和战斗小生物（称为 Axies）。每个 Axie 是一个独特的 ERC721 代币。
--Decentraland：是一个虚拟现实平台，用户可以在其中购买、出售和管理虚拟土地和资产，土地和资产都是基于 ERC721 标准的。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IERC721标准的主选函数9个：
--balanceOf(address owner)：返回指定地址拥有的代币数量。
--ownerOf(uint256 tokenId)：返回指定代币ID的当前拥有者地址。
--transferFrom(address from, address to, uint256 tokenId)：将指定代币从一个地址转移到另一个地址。
--safeTransferFrom(address from, address to, uint256 tokenId)：安全转移代币，确保接收者是一个能够处理代币的合约(合约的话，会要求实现ERC721Receiver接口)或地址。
--safeTransferFrom(address from, address to, uint256 tokenId, bytes data)：同上，但允许附加数据传递。
--approve(address to, uint256 tokenId)：授权另一个地址使用你的NFT。
--getApproved(uint256 tokenId)：查询tokenId被批准给了哪个地址。
--setApprovalForAll(address operator, bool approved)：将自己持有的该系列NFT批量授权给某个地址operator。
--isApprovedForAll(address owner, address operator)：查询某地址的NFT是否批量授权给了另一个operator地址。


IERC721标准的主选事件3个：
--Transfer(address indexed from, address indexed to, uint256 indexed tokenId)：代币转账事件。
--Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)：授权事件。
--ApprovalForAll(address indexed owner, address indexed operator, bool approved)：批量授权事件。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IERC721Receiver：
--如果接收代币的地址，指向的是合约，那么该合约必须实现IERC721Receiver接口，否则在进行"安全转账"的时候会发生回退，这是为了防止代币被转入黑洞中。

interface IERC721Receiver {
    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IERC721Metadata：
--是ERC721的拓展接口，实现了3个查询metadata元数据的常用函数。

interface IERC721Metadata is IERC721 {
    // 返回代币名称
    function name() external view returns (string memory);

    // 返回代币的简短标识符。
    function symbol() external view returns (string memory);

    // 通过tokenId查询metadata的链接url
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////