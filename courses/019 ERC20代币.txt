
概念：
--一个数字资产的容器，允许用户之间进行转移和管理。
--ERC20是以太坊上的代币标准，来自2015-11-19 V神参与的EIP20。
--ERC20代币属于同质化代币(FT：全称Fungible Token)。
--IERC20是ERC20代币标准的接口合约，规定了ERC20代币需要实现的函数和事件。(商业代币项目，理论上会直接使用openzeppelin的IERC20.sol)
--Etherscan、MythX 等平台有一些静态工具，能帮助开发者分析合约代码是否"完全符合ERC20标准"。
--IERC20规定了同质化代币应该如何实现在以太坊区块链上。

总结：
--2015年底提出的ERC20代币标准极大的降低了以太坊上发行代币的门槛，并开启了ICO(Initial Coin Offering是指“首次代币发行”)大时代。
--在投资时，仔细阅读项目的代币合约，可以有效避开貔貅，增加投资成功率。

记忆方式：
--从直觉出发(类似于，马斯克第一性原理)
--一个货币(数字资产容器)，它理应具备什么特征
--IERC20标准:6个函数，2个事件
--了熟于心。

IERC20标准的主选函数6个：
--totalSupply(): 返回代币总供应量。
--balanceOf(address owner): 查询指定账户(owner)的代币余额。
--transfer(address to, uint256 value): 从账户(msg.sender)，转指定数量(value)的代币，到另一个账户(to)。
--transferFrom(address from, address to, uint256 value): 某个账户(from)，委托给交易所(msg.sender)，把自己账户(from)的一定数量(value)的代币，转给另一个账户(to)。
--approve(address spender, uint256 value): 一个账户(msg.sender)，授权给交易所(spender)，可以花费自己账户(msg.sender)的一定数量(value)的代币。
--allowance(address owner, address spender): 查询账户(owner)对指定账户(spender)的授权代币数量。

IERC20标准的主选事件2个：
--Transfer(address indexed from, address indexed to, uint256 value): 代币转账事件。
--Approval(address indexed owner, address indexed spender, uint256 value): 授权事件。

IERC20非标准函数：
--symbol(): 返回代币的符号（symbol）。
--name(): 返回代币的名称（name）。
--decimals(): 返回代币的小数位数（decimals），通常是18。
--increaseAllowance(address spender, uint256 addedValue): 增加某个地址的授权额度。
--decreaseAllowance(address spender, uint256 subtractedValue): 减少某个地址的授权额度。
--mint(address to, uint256 amount): 创建新的代币并分配给指定地址。
--burn(uint256 amount): 销毁一定数量的代币，减少总供应量。
--pause() / unpause(): 暂停或恢复合约功能，通常用于安全性。
--setOwner(address newOwner): 更改合约所有者，增强管理灵活性。
//////////////////////////////////////////////////////////////////////////////////////////

其他问题：
--一定是先使用授权approve()，再使用transferFrom()转账!
--生产环境下，需要考虑补充"onERC20Received特性"，以及"checks-effects-interactions 模式"。
--在生产环境下，链端一般是不存储持币用户列表的数据(维护消耗大)，一般通过关联的后端，或者分析交易日志，来获取交易者信息。
--项目具有总供应量固定的经济模型，会使用预铸造(即，在构造函数中一次性给管理员铸造全部代币)。
--项目具有动态铸造代币的经济模型，代币供应量可能根据特定条件逐步增加(如，奖励机制、生态发展、流动性挖矿等)。
--ERC20代币的功能拓展，就不说明了(请移步到OpenZepplin)。

著名案例：关于"USDT泰达币没有严格遵循ERC20标准"，在使用IERC20强转时，无法转出！
--需要严格按照IERC20的参数，以及返回值来定义基本函数
--https://learnblockchain.cn/article/506
--所以，一般会引入：@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol

//////////////////////////////////////////////////////////////////////////////////////////

--手写练习源码：contract/TestERC20.sol
--有改进补充的源码：contract/TestERC20_Addition.sol