Solid       | adj   |   坚硬的，可靠的
Solidity    | n     |   硬度，可靠性


// SPDX-License-Identifier: MIT
--Massachusetts Institute of Technology, 简称MIT
--开源许可证，但它要求保留版权声明和许可证声明，
--它是Github上使用率最高的许可证
--它最初由麻省理工学院开发和使用

// SPDX-License-Identifier: Unlicense
--许可证表示代码没有任何版权限制，任何人都可以自由使用

// SPDX-License-Identifier: Apache-2.0
--一个宽松的开源许可证，允许用户自由使用、修改和分发软件，同时提供了对贡献者的保护。
--它要求对源代码的修改和分发包括原始许可证和版权声明，以及任何修改的说明。Apache 2.0 也提供了专利权利的保障。

// SPDX-License-Identifier: GPL-2.0-or-later
--一种强制开源许可证，要求所有基于 GPL 许可的软件修改版和衍生版也必须以 GPL 许可证发布。
--or-later 表示该软件也可以在 GPL 的任何后续版本下发布。

// SPDX-License-Identifier: GPL-3.0-or-later
--相比于 GPL-2.0，它在版权和专利方面提供了更多的保护。
--or-later 表示该软件也可以在 GPL 的任何后续版本下发布。

选择和使用 SPDX 标识符的原因
--明确许可证要求: 使用 SPDX 标识符可以清晰地表明代码的许可证类型，有助于避免法律纠纷和合规问题。
--自动化工具: SPDX 标识符支持工具和自动化流程（如许可证合规扫描），帮助开发人员更容易管理和维护代码库中的许可证信息。
--项目标准: 在开源项目中，明确的许可证声明是良好的实践，有助于社区理解和遵守许可证条款。


HEX，英文全称 Hexadecimal，表示十六进制。
DEC，英文全称 Decimal，表示十进制。
OCT，英文全称 Octal，表示八进制。
BIN，英文全称 Binary，表示二进制。


指定编译器版本的指令
pragma solidity 0.8.0;                  精确版本
pragma solidity >=0.8.0 <0.9.0;         版本范围
pragma solidity ^0.8.0;                 向后兼容的版本(等价于上一条)
pragma solidity >=0.0.0;                任意版本(不推荐)
pragma solidity ^0.7.0 || ^0.8.0;       多个版本范围


值类型（Value Types）：
--布尔型（bool）
--整数型（int 和 uint）
--地址型（address）（20 字节）
--字节型（bytes1 到 bytes32）（1个字节 到 32个字节）
--枚举型（enum）（起始值 0）

整数类型细说：
--不论uint或者int【8位 ~ 256位】【使用字节对齐的方式位数值是8/16/24/32/40/48/56/64/72/80/88/96...........256】【粗暴理解为8的倍数值】
--占位字节数【1 ~ 32】

uint
--取值范例【0 ~ 1111 1111】
--取值【0 ~ 2^Bit -1】
--如【0 ~ 2^8 -1】即【0 ~ 255】

int(建议复习一下计算机的补码原理)
--取值范例【1111 1111 , 0111 1111】
--取值【-1*(2^(Bit-1)) ~ 2^(Bit-1) -1】
--如【-1*(2^7) ~ 2^7 -1】即【-128 ~ 127】

地址类型细说：
--20字节值
--十六进制字符的每一位都可以表示 16 种不同的值，而 4 位二进制数据也可以表示 16 种不同的值（0 到 15）；每1位个十六进制字符代表4位个二进制
--1个字节 = 8位个二进制数
--20个字节 = 8*20位个二进制数 = 8*20/4位个二进制数 = 40位个十六进制数
--如，0x1234567890123456789012345678901234567890，十六进制表达方式，即40个值




引用类型（Reference Types）：

